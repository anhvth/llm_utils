Example 1:
Task Description: Create a prompt template that takes a query as input and outputs a joke with a setup and punchline.


```python
from langchain.output_parsers import PydanticOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_openai import ChatOpenAI

# Set up the language model
model = ChatOpenAI(model="gpt-4o-mini", temperature=0.0)

# Define the output structure
class Joke(BaseModel):
    setup: str = Field(description="question to set up a joke")
    punchline: str = Field(description="answer to resolve the joke")

# Create a PydanticOutputParser
parser = PydanticOutputParser(pydantic_object=Joke)

# Set up a PromptTemplate with clear instructions
prompt = PromptTemplate(
    template="""
    Create a joke with a setup and punchline.
    
    Setup: A question or statement that sets up the joke.
    Punchline: A humorous answer or twist that resolves the joke.
    
    Please respond in the following format:
    {{
        "setup": "[insert setup here]",
        "punchline": "[insert punchline here]"
    }}
    
    Query: {query}
    """,
    input_variables=["query"],
)

# Combine the prompt and model
prompt_and_model = prompt | model

# Invoke the program with a sample query
output = prompt_and_model.invoke({"query": "Tell me a joke."})
parser.invoke(output)
```

Example 2:
Task Description: Create a prompt template that takes a query as input and outputs a motivational quote.


```python
from langchain.output_parsers import PydanticOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_openai import ChatOpenAI

# Set up the language model
model = ChatOpenAI(model="gpt-4o-mini", temperature=0.0)

# Define the output structure
class Quote(BaseModel):
    text: str = Field(description="motivational quote text")
    author: str = Field(description="author of the quote")

# Create a PydanticOutputParser
parser = PydanticOutputParser(pydantic_object=Quote)

# Set up a PromptTemplate with clear instructions
prompt = PromptTemplate(
    template="""
    Provide a motivational quote.
    
    Please respond in the following format:
    {{
        "text": "[insert quote text here]",
        "author": "[insert author here]"
    }}
    
    Query: {query}
    """,
    input_variables=["query"],
)

# Combine the prompt and model
prompt_and_model = prompt | model

# Invoke the program with a sample query
output = prompt_and_model.invoke({"query": "Give me a motivational quote."})
parser.invoke(output)
```

Example 3:
Task Description: Create a prompt template that takes a query as input and outputs a riddle.


```python
from langchain.output_parsers import PydanticOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_openai import ChatOpenAI

# Set up the language model
model = ChatOpenAI(model="gpt-4o-mini", temperature=0.0)

# Define the output structure
class Riddle(BaseModel):
    question: str = Field(description="the question that forms the riddle")
    answer: str = Field(description="the answer to the riddle")

# Create a PydanticOutputParser
parser = PydanticOutputParser(pydantic_object=Riddle)

# Set up a PromptTemplate with clear instructions
prompt = PromptTemplate(
    template="""
    Create a riddle.
    
    Please respond in the following format:
    {{
        "question": "[insert question here]",
        "answer": "[insert answer here]"
    }}
    
    Query: {query}
    """,
    input_variables=["query"],
)

# Combine the prompt and model
prompt_and_model = prompt | model

# Invoke the program with a sample query
output = prompt_and_model.invoke({"query": "Give me a riddle."})
parser.invoke(output)
```

Example 4:
Task Description: Create a prompt template that takes a query as input and outputs a fun fact.


```python
from langchain.output_parsers import PydanticOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_openai import ChatOpenAI

# Set up the language model
model = ChatOpenAI(model="gpt-4o-mini", temperature=0.0)

# Define the output structure
class FunFact(BaseModel):
    fact: str = Field(description="a fun and interesting fact")

# Create a PydanticOutputParser
parser = PydanticOutputParser(pydantic_object=FunFact)

# Set up a PromptTemplate with clear instructions
prompt = PromptTemplate(
    template="""
    Provide a fun fact.
    
    Please respond in the following format:
    {{
        "fact": "[insert fact here]"
    }}
    
    Query: {query}
    """,
    input_variables=["query"],
)

# Combine the prompt and model
prompt_and_model = prompt | model

# Invoke the program with a sample query
output = prompt_and_model.invoke({"query": "Tell me a fun fact."})
parser.invoke(output)


Example 5: Task Description: Create a few-shot learning to generate jokes with a setup and punchline, outputting the results pydantic format with appropriate keys.


```python
# Import predefine function to generate chain given examples

from llm_utils.meta_prompt.fewshort_prompt_msg import generate_pydantic_parse_chain
from langchain_core.pydantic_v1 import BaseModel as BaseModelV1, Field, validator

# Define your desired data structure.
class Joke(BaseModelV1):
    setup: str = Field(description="question to set up a joke")
    punchline: str = Field(description="answer to resolve the joke")

    # You can add custom validation logic easily with Pydantic.
    @validator("setup")
    def question_ends_with_question_mark(cls, field):
        if field[-1] != "?":
            raise ValueError("Badly formed question!")
        return field

examples = [
    {
        "human": "Tell me a joke about programming.",
        "ai": """
        {
            "setup": "Why do programmers prefer dark mode?",
            "punchline": "Because light attracts bugs!"
        }
        """,
    },
    {
        "human": "Give me a joke about animals.",
        "ai": """
        {
            "setup": "Why don't oysters donate to charity?",
            "punchline": "Because they're shellfish!"
        }
        """,
    },
]

system_message = "You are given a question, you will provide a joke in the form of a json object with keys 'setup' and 'punchline'"
prompt, model, parser = generate_pydantic_parse_chain(
    examples,
    Joke,
    model="gpt-4o-mini",
    system_message=system_message,
)
chain = prompt | model | parser
```